폴더 확인
- C:\class\code\spring

[개발환경]
1. JDK 
- cmd > javac --version
	> javac 11.X.XX

2. IDE
- Eclipse
- STS(=Eclipse) > 
- IntelliJ
- VS Code

3. apache-tomcat-9.0.XX
- https://tomcat.apache.org

4. Lombok


[Spring]
- Spring Framework 1.0 ~ 6.X
  - JDK 11(LTS)
  - STS3
- Spring Boot 1.0 ~ 3.X
  - JDK 17이상
  - STS4

https://spring.io

새 프로젝트
- Project name: "hello"


Enter a topLevelPackage

- "com.test.java"

[STS 환경 설정]
- 인코딩
    - Workspace > Text file encoding > UTF-8
  - CSS > UTF-8
  - HTML > UTF-8
  - JSP > UTF-8
  - Content Types > Text > Default encoding > "UTF-8" > Update 버튼 클릭

- 폰트/테마

- 톰캣 등록 > "server" > Runtime Environment

- Window > Web Browser > Default or Chrome


Spring MVC Project 의 구조
1. src/main/java
   - 여태까지 사용하던 Java 소스 폴더
     - 패키지 or 파일

2. src/main/resources
   - Java 소스 이외의 자원을 보관하는 폴더
     - 스프링 관련 여러가지 설정 파일들을 보관

3. src/test/java
   - 단위 테스트용
4. src/test/resources
   - 단위 테스트용

5. JRE System Library
   - JRE 라이브러리
     - JavaSE-1.6 > 11

6. Maven Dependencies
   - 빌드 도구(Maven or Gradle)
   - 프로젝트 생성 or 라이브러리 관리 & 빌드 & 배포
   - 수업 > 라이브러리 관리용으로 사용

7. src
   7.1 webapp
       - 웹 루트 폴더
     7.2 webapp > resources
            - CSS, JavaScript, Image, 정적 HTML 등을 관리하는 전용 폴더
       - 강제력(X) > 권장(O)
   7.3 webapp > WEB-INF
      - 7.3.1 classes
	- 컴파일된 클래스 파일 저장폴더(이전 bin)
	- 개발자 관여(X)
      - 7.3.2 spring(*****)
	- 스프링 관련 대부분의 설정
	
	7.3.2.1 appServlet > servlet-context.xml
	- 스프링 설정 파일
	
	7.3.2.2 root-context.xml
	- 스프링 설정 파일

      - 7.3.3 views
	- 뷰 페이지

      - 7.3.4 web.xml
	- 톰캣 설정 파일

8. pom.xml
   - Project Object Model
   - 메이븐 설정



새 프로젝트
- New > Spring Legacy Project
- name: "BeginTest"
- Spring MVC Project
- "com.test.begin"


자바 기반 웹 프로젝트 구현 > 학습 난이도
1. Servlet/JSP : 초반(쉬움) > 후반(어려움) 
2. Spring : 초반(어려움) > 중반(쉬움) > 후반(어려움)


Spring Framework
- Spring 1.0 ~ 6.2.5
- Spring 5.XX 수업
- 자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크다.
- 콘솔 프로그램, 응용 프로그램, 웹 응용 프로그램 등 > 웹 응용 프로그램

Spring Project
- 가장 중요한 코어 역할 프로젝트 + 추가적인 기능 프로젝트
- Spring
- Spring MVC
- Spring AOP
- Spring Data
- Spring Security
- Spring Boot
- ..


스프링 프레임워크 구성 요소 > 주요 기술

1. POJO 기반
2. 의존성 주입 지원(DI)
3. 관점 지향 프로그래밍 지원(AOP)
4. Spring MVC
5. 레이아웃 지원(Tiles)
6. 데이터베이스 연동 지원
	- JDBC
	- Spring JDBC
	- MyBatis
	- JPA
7. Spring Security


Spring Core > DI(*****), AOP


Spring DI
- 디자인 패턴: DI > Dependency Injection > 의존(성) 주입
- 스프링 도입/적용 > Spring DI
- 스프링에서 가장 중요한 개념 중 하나 > 스프링의 모든 객체 관리에 사용한다.(*****)
- "프로그래밍에서 구성 요소간의 의존 관계가 소스 내부가 아닌 외부 환경에서 정의되게 하는 디자인 패턴"

- 의존 관계?
- src/main/java > "com.test.begin.di1"
						> "Main.java"
						> "Service.java"
						> "Hong.java"
 
				 > "com.test.begin.di2"
						> "Main.java"
						> "Service.java"
						> "Hong.java"

				 > "com.test.begin.di3"
						> "Main.java"
						> "Service.java"
						> "Hong.java"
						> "di3.xml"
	

**** 스프링 환경에서는 클래스의 객체(Bean, 빈)를 생성~관리~소멸까지를
	1. 개발자가 직접
	2. 스프링이 조작 > 스프링 환경 설정 파일(XML, Java)
	
						
- src/test/java > "com.test.begin.di3"
					> "DITest.java"

Spring AOP, Aspect Oriented Programming
- 관점 지향 프로그래밍
- 코드를 작성 > 주업무 코드 + 보조업무 코드

Spring AOP 용어
1. Core Concern
	- 주업무, 비즈니스 코드
2. Cross-cutting Concern
	- 보조 업무
	
3. Target
4. Proxy
5. JointPoint
6. Pointcut
7. Aspect
8. Advice

	- Before Advice
	- After Advice
	- Around Advice

	- After-returning Advice
	- After-throwing Advice


메모장
- "com.test.begin.aop"
	- "Main.java"			//메인
	- "Memo.java"(I)		//메인 업무 객체(인터페이스)
	- "MemoImpl.java"(C)	//구현체
	
	- "Logger.java"(C)		//보조 업무 개체(클래스)
	
	- "memo.xml"			//스프링 설정 파일

Spring Core > DI, AOP














